"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4438],{7837:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=a(5893),t=a(1151);const s={},i="How To",o={id:"api/how-to",title:"How To",description:"To build lambda API for CareSpan, it is best that it follows the following:",source:"@site/docs/api/02-how-to.md",sourceDirName:"api",slug:"/api/how-to",permalink:"/api-lambda/docs/api/how-to",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/02-how-to.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"docsSidebar",previous:{title:"What is inside?",permalink:"/api-lambda/docs/api/what-is-inside"},next:{title:"Billing Information",permalink:"/api-lambda/docs/api/patient-billing"}},l={},d=[{value:"Building a EMR lambda",id:"building-a-emr-lambda",level:2},{value:"Example",id:"example",level:3},{value:"1. Create a ehr handler",id:"1-create-a-ehr-handler",level:4},{value:"2. Fetch records based on input",id:"2-fetch-records-based-on-input",level:4},{value:"Return data in FHIR",id:"return-data-in-fhir",level:4},{value:"3. Ensure we have tracking in place",id:"3-ensure-we-have-tracking-in-place",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"how-to",children:"How To"}),"\n",(0,r.jsx)(n.p,{children:"To build lambda API for CareSpan, it is best that it follows the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use CareSpan Middlewear"}),"\n",(0,r.jsxs)(n.li,{children:["Adhering to FHIR standard","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use FHIR resources whenever possible"}),"\n",(0,r.jsx)(n.li,{children:"Use FHIR parameters for searching, filtering, sort as much as possible"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This how-to will describe how we write various lambdas"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"EMR Lambda"}),"\n",(0,r.jsx)(n.li,{children:"PMR Lambda (TBD)"}),"\n",(0,r.jsx)(n.li,{children:"Reporting Lambda (TBD)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"building-a-emr-lambda",children:"Building a EMR lambda"}),"\n",(0,r.jsxs)(n.p,{children:["There are ",(0,r.jsx)(n.a,{href:"https://carespan-health.github.io/ts-npm/docs/intro",children:"CareSpan NPM packages"})," that you will need to install in your project"]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.h4,{id:"1-create-a-ehr-handler",children:"1. Create a ehr handler"}),"\n",(0,r.jsx)(n.p,{children:"Below is the boiler plate for creating a hander"}),"\n",(0,r.jsxs)(n.p,{children:["The example is to get a list of Care Plan (cat ",(0,r.jsx)(n.code,{children:"36"}),") from the EHR database and return as a bundle of Care Plan"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { APIGatewayProxyEvent } from "aws-lambda";\nimport middy from "@middy/core";\nimport httpEventNormalizer from "@middy/http-event-normalizer";\nimport httpErrorHandler from "@middy/http-error-handler";\nimport httpResponseSerializer from "@middy/http-response-serializer";\n\nimport { transpileSchema } from "@middy/validator/transpile";\nimport getQuerySchema from "src/middleware/schema/input/getCarePlanRecordSchema";\nimport {\n    getResponseFhirBundleSchema as getResponseSchema,\n} from "@cscore/cs-api";\n\nimport {\n    MwAccessDefault,\n    MwCleanUpProcess,\n    MwEventTracking,\n    MwValidateProcess,\n    MwSchemaValidator,\n} from "@cscore/cs-api";\nimport getCsDb from "src/model/CsDb";\n\nexport const getCarePlanHandler = async (\n    event: APIGatewayProxyEvent\n): Promise<any> => {\n    // ...\n};\n\nexport const handler = middy(getCarePlanHandler)\n    .use(MwValidateProcess())\n    .use(\n        httpResponseSerializer({\n            serializers: [\n                {\n                    regex: /^application\\/xml$/,\n                    serializer: ({ body }) => `<message>${body}</message>`,\n                },\n                {\n                    regex: /^application\\/json$/,\n                    serializer: ({ body }) => JSON.stringify(body),\n                },\n                {\n                    regex: /^text\\/(plain|csv)$/,\n                    serializer: ({ body }) => body,\n                },\n            ],\n            defaultContentType: "application/json",\n        })\n    )\n    .use(\n        MwSchemaValidator({\n            eventSchema: getQuerySchema(transpileSchema),\n            responseSchema: getResponseSchema(transpileSchema),\n        })\n    )\n    .use(httpEventNormalizer())\n    // .use(httpHeaderNormalizer())\n    .use(\n        MwCleanUpProcess({\n            parseAsBundled: true, // always loop through event.body.bundle\n            dbConnector: getCsDb(),\n        })\n    )\n    .use(\n        MwAccessDefault({\n            dbConnector: getCsDb(),\n        })\n    )\n    .use(\n        MwEventTracking({\n            dbConnector: getCsDb(),\n        })\n    )\n    .use(httpErrorHandler());\n'})}),"\n",(0,r.jsx)(n.p,{children:"The boiler plate imports all the must have information"}),"\n",(0,r.jsxs)(n.p,{children:["You can copy the boiler plate and repalce ",(0,r.jsx)(n.code,{children:"CarePlan"})," with something else"]}),"\n",(0,r.jsxs)(n.p,{children:["Do note one thing, here we need think about the inputs. In this case, we will allow patient guid as ",(0,r.jsx)(n.code,{children:"subject"}),". ",(0,r.jsx)(n.code,{children:"getQuerySchema"})," needs to be updated to allow ",(0,r.jsx)(n.code,{children:"subject"})]}),"\n",(0,r.jsx)(n.h4,{id:"2-fetch-records-based-on-input",children:"2. Fetch records based on input"}),"\n",(0,r.jsx)(n.p,{children:"Next, you want to get all the inputs that you will need to run the function."}),"\n",(0,r.jsx)(n.p,{children:"In our case, we will need to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Get the patient's cat ",(0,r.jsx)(n.code,{children:"36"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Therefore, we will need to get the patient information"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// update handler\nexport const getCarePlanHandler = async (\n    event: APIGatewayProxyEvent\n): Promise<any> => {\n    const patientGuid = event?.queryStringParameters?.subject;\n    const including = [36];\n\n    const lambda = new CarePlanLambda({});\n\n    // this is a ehr lambda, hence the init function can pull the records for us\n    const records = await lambda.init({\n        patientGuids: [patientGuid],\n        including,\n    });\n\n    const response = await lambda.run({\n        records,\n        patientGuid: patientGuid,\n        including,\n    });\n\n    return response;\n};\n\n"})}),"\n",(0,r.jsx)(n.h4,{id:"return-data-in-fhir",children:"Return data in FHIR"}),"\n",(0,r.jsx)(n.p,{children:"Now we have the parameter, we can run our business logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// add to import\nimport { Bundle } from "fhir/r5";\nimport { EhrLambda } from "../EhrLambda";\n\n// add the CarePlanLambda class\nclass CarePlanLambda extends EhrLambda {\n    async run(params) {\n        const records = this.recordMap;\n        const bundle: Bundle = await this.getBundleFromRecords(records);\n        return this.renderSuccess(bundle);\n    }\n}\n\n// need to export this at the end if we want to inherit it\nexport { CarePlanLambda }\n'})}),"\n",(0,r.jsx)(n.h4,{id:"3-ensure-we-have-tracking-in-place",children:"3. Ensure we have tracking in place"}),"\n",(0,r.jsx)(n.p,{children:"We are building an EHR, hence everything we build needs to be tracked."}),"\n",(0,r.jsx)(n.p,{children:"Now, we have everything we need, but you will get an error as such"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"\u2716 Unhandled exception in handler 'getCarePlan'.\n\u2716 { InternalServerError: Missing steps!!\n      at csValidateProcessAfter (/Users/justinho/Projects/sandbox/lambda/ehr/carespan-ehr/node_modules/@cscore/cs-api/dist/index.js:14700:13)\n      ...\n    [cause]: { missingSteps: [ 'csEventTracking.setTrackingEvent' ] } }\n\u2716 Missing steps!!\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is because we always need to track the event of what we do"}),"\n",(0,r.jsx)(n.p,{children:"More to come about events, but for now, we can do this"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// update the run function\n// add the CarePlanLambda class\nclass CarePlanLambda extends EhrLambda {\n    async run(params) {\n        const records = this.recordMap;\n        const bundle: Bundle = await this.getBundleFromRecords(records);\n        // when there is no error, call the tracking function\n        await this.trackEvent(records, "read"); // the event detail is defined by the vo - in this case: src/vo/records/CarePlanRecord.ts\n        return this.renderSuccess(bundle);\n    }\n}\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>o,a:()=>i});var r=a(7294);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);